#!/bin/bash

# libjpeg-turbo Style Checker, or
# How I Learned to Stop Worrying and Love Regular Expressions
#
# Copyright (C)2018-2022 D. R. Commander.  All Rights Reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# - Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# - Neither the name of the libjpeg-turbo Project nor the names of its
#   contributors may be used to endorse or promote products derived from this
#   software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS",
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

SCRIPTDIR=`dirname $0`

set -f

# Move along.  Nothing to format here.
FILES='./* :!.gitattributes :!doc/ :!java/doc/ :!simd/gas-preprocessor.in :!*.jpg :!*.ppm :!*.bmp :!*.icc :!*.rtf :!*.rtf.in :!simd/nasm/jsimdcfg.inc :!win/gcc :!win/vc :!win/*.cmake.in'

# Files that use tabs for indentation
TIFILES='doxygen-extra.css fuzz/build.sh release/Distribution.xml.in release/installer.nsi.in release/make*.in release/rpm.spec.in release/uninstall.in tj*.in croptest.in'
NTIFILES=$(for i in $TIFILES; do echo :!$i; done)

# C, Java, and GAS files
CGFILES='*.c *.cc *.h *.h.in example.txt *.S :!*.inc.h'
NCGFILES=':!*.c :!*.cc :!*.h :!*.h.in :!example.txt :!*.S *.inc.h'
CJGFILES="$CGFILES"' *.java *.java.in :!tjbenchtest.java.in :!tjexampletest.java.in'
NCJGFILES="$NCGFILES"' :!*.java :!*.java.in'

if [ "$1" = "-selftest" ]; then
	pushd $SCRIPTDIR >/dev/null 2>&1
	SCRIPTDIR=.
	FILES="styletest.c"
	CGFILES="styletest.c"
	CJGFILES="styletest.c"
	TIFILES=
fi

filter_nasm_comments()
{
	pcregrep -v '(simd|win)/.*(\.asm|\.inc\.h|\.inc):.*;.*'"$EXPR"
}

filter_loongson_comments()
{
	grep -vE 'simd/mips64/.*-mmi\.c:.*/\*.*'"$EXPR"'.*\*/$'
}

filter_quotes()
{
	pcregrep -v ':.*\"[^\"]*'"$EXPR"'[^\"]*\"'
}

grep_without_c_comments()
{
	git ls-files -- ${2+"$@"} | while read file; do
		"$SCRIPTDIR/remcomms.sh" $file | pcregrep "$1" | sed -E 's@^@'$file':@'
	done
}


echo

echo '********** DETECTING WHITESPACE ERRORS **********'

echo '---------- Stray tab characters ----------'
echo
git grep -E $'\t' -- $FILES $NTIFILES
if [ "$TIFILES" != "" ]; then
	git grep -P '[^^\n\t]\t' -- $TIFILES
fi
echo

echo "---------- Spaces used for indentation where they shouldn't be ----------"
echo
EXPR='^ +'
if [ "$TIFILES" != "" ]; then
	git grep -E "$EXPR" $TIFILES
fi
unset EXPR
echo

echo '---------- Alt-Space ----------'
echo
git grep 'Â ' -- $FILES
echo

echo '---------- Blank line(s) at top of file ----------'
echo
git ls-files -- $FILES | while read file; do
	MATCH=`head -n1 $file | grep -E '^[ '$'\t]*$'`
	if [ $? = 0 ]; then
		echo $file:$MATCH
	fi
done
echo

echo '---------- No blank line at end of file ----------'
echo
git ls-files -- $FILES | while read file; do
	pcregrep -ML '\n\Z$' $file
done
echo

echo '---------- General whitespace errors ----------'
echo
git diff --check $(git rev-list HEAD | tail -n 1) -- $FILES |
	grep -vE 'README\.md:[0-9]+: leftover conflict marker'
echo

echo # ************************************************************************


echo '********** DETECTING INCORRECT COMMENT FORMATTING **********'

echo '---------- C++-style comments in C files ----------'
echo
git grep -P '(?<!http:)(?<!https:)(?<!ftp:)//' -- $FILES ':!.github/workflows' ':!*.java' ':!release/makesrpm.in' ':!tj*test*.in'
echo

echo '---------- C-style trailing comments in Java files ----------'
echo
git grep -E '[^ ] +\/\*' -- java
echo

echo # ************************************************************************


echo '********** DETECTING BAD LINE CONTINUATION SPACING **********'
echo
git grep -E '[^ ]+(\\| {2,}\\)$' -- $FILES
echo

echo # ************************************************************************


echo '********** DETECTING UNATTACHED else/catch/struct **********'
echo
git ls-files -- $FILES | while read file; do
	pcregrep -H -M '^[^{]*}\n+ *(else|catch)' $file
	pcregrep -H -M '[^#]else\n *{' $file
	pcregrep -H -M '^[^\n\(\/\*]*struct[^\n\)\/\*]*\n[ ]*\{[^\};]*$' $file
done
echo

echo # ************************************************************************


echo '********** DETECTING INCORRECT BRACKET SPACING **********'

echo '---------- Function-like macro with unattached bracket ----------'
echo
git grep -E '^ *\{[^\}]*\\$' -- $FILES
echo

echo '---------- {something ----------'
echo
EXPR='{[^ \}]'
EXCLEXPR='(?!{@link)(?!{\+\-})(?!{fr}\])'
git grep -P "$EXCLEXPR""$EXPR" -- $FILES ':!*.S' ':!.github/workflows' ':!BUILDING.md' ':!*CMakeLists.txt' ':!cmakescripts/' ':!/*.txt' ':!fuzz/build.sh' ':!java/README' ':!release/' ':!tj*test*.in' ':!croptest.in' |
	filter_nasm_comments |
	filter_loongson_comments
# Process GAS files separately (we only check these because they contain some
# C code in the comments.)
EXCLEXPR='(?!{[drq][0-9]+[,-}\[ ])(?!{[vYN][0-9]+\.[0-9]*[bdhs])(?!{TMP1,)(?!{ANDMASK\.16b)(?!{ZERO\.8h)'
git grep -P "$EXCLEXPR""$EXPR" -- '*.S'
unset EXPR
unset EXCLEXPR
echo

echo '---------- { something; ... ----------'
echo
EXPR='{ [^}]*[;\(][^}\)]*$'
git grep -P "$EXPR" -- $FILES
unset EXPR
echo

echo '---------- something} ----------'
echo
EXPR='[^ \{@]}'
EXCLEXPR='(?<!{\+\-})(?<!\[{fr})'
git grep -P "$EXPR""$EXCLEXPR" -- $FILES ':!*.S' ':!.github/workflows' ':!BUILDING.md' ':!*CMakeLists.txt' ':!cmakescripts/' ':!/*.txt' ':!fuzz/build.sh' ':!java/README' ':!release/' ':!tj*test*.in' ':!croptest.in' |
	grep -vE '\.java: +\* +.*'"$EXPR" |
	filter_nasm_comments |
	filter_loongson_comments
# Process GAS files separately (we only check these because they contain some
# C code in the comments.)
EXCLEXPR='(?<![drq][0-9]})(?<![dq][0-9][0-9]})(?<![vY][0-9]\.[bh]})(?<!v[0-9][0-9]\.[bdhs]})(?<![vNY][0-9]\.[0-9][bh]})(?<!v[0-9][0-9]\.[0-9][hb]})(?<!v[0-9][0-9]\.[0-9][0-9]b})(?<!d[0-9][0-9]\[[0-9]\]})(?<!{d[0-9]\[[0-9]\]})(?<!v[0-9]\.[0-9][0-9]b})(?<!TMP[0-9]})(?<!ANDMASK\.16b})(?<!ZERO\.8h})(?<!lr})(?<!pc})'
git grep -P "$EXPR""$EXCLEXPR" -- '*.S'
unset EXPR
unset EXCLEXPR
echo

echo '---------- ... something } ----------'
echo
EXPR='^[^{]*[^ \}] +}'
git grep -E "$EXPR" -- $FILES |
	grep -vE 'simd/.*\.asm:.*;.*}'
unset EXPR
echo

echo '---------- something{ ----------'
echo
EXPR='[^ @]{'
EXCLEXPR='(?!\.{@link)(?![\]\>]{\+\-})(?!\[{fr}\])'
git grep -P "$EXCLEXPR""$EXPR" -- $FILES ':!.github/workflows' ':!BUILDING.md' ':!*CMakeLists.txt' ':!cmakescripts/' ':!fuzz/build.sh' ':!java/README' ':!release/' ':!tj*test*.in' ':!croptest.in' |
	filter_nasm_comments |
	filter_loongson_comments
unset EXPR
unset EXCLEXPR
echo

echo '---------- }something ----------'
echo
EXPR='}[^ ;,\)\.\(\[\<\]]'
git grep -P "$EXPR" -- $FILES ':!.github/workflows' ':!BUILDING.md' ':!*CMakeLists.txt' ':!cmakescripts/' ':!/*.txt' ':!fuzz/build.sh' ':!release/' ':!tj*test*.in' ':!croptest.in' |
	filter_nasm_comments
unset EXPR
echo

echo # ************************************************************************


echo '********** DETECTING INCORRECT STATEMENT SPACING **********'

echo '---------- if( ----------'
echo
git grep -P '(?<!_g)if\(' -- $FILES ':!*CMakeLists.txt' ':!cmakescripts/'
echo

for statement in for else catch while do switch; do
	echo '---------- '$statement'( ----------'
	echo
	git grep -E $statement'\(' -- $FILES ':!*CMakeLists.txt' ':!cmakescripts/'
	git ls-files -- $FILES | while read file; do
		pcregrep -H -M $statement' *\([^\n]*\n *{' $file
	done
	echo
done

echo '---------- Semicolon spacing ----------'
echo
git grep -P '(?<!;) ;' -- $FILES $NFORMATTED ':!*.asm' ':!cjpeg.1' ':!win/*.def' ':!wizard.txt' |
	filter_nasm_comments
echo

echo '---------- Semicolon spacing in one-liners ----------'
echo
EXPR='; [^ }/\\]'
EXCLEXPR='(?! *for \()(?!.*; \)$)(?!.*\) {)'
grep_without_c_comments '^'"$EXCLEXPR"'.*'"$EXPR" $FILES ':!*.md' ':!README.ijg' ':!change.log' ':!cmakescripts/' ':!fuzz/build.sh' ':!*.1' ':!/*.txt' ':!release/*.in' ':!*.asm' ':!*.inc' ':!*.inc.h' ':!tj*test*.in' ':!croptest.in' |
	filter_quotes
unset EXPR
unset EXCLEXPR
echo

echo # ************************************************************************


echo '********** DETECTING INCORRECT FUNCTION/TYPE CAST SPACING **********'

echo '---------- (type*) ----------'
echo
git grep -E '[^ \(\*]\*\)' -- $FILES ':!release/makemacpkg.in'
echo

echo '---------- (type**) ----------'
echo
EXPR='[^ \*]\*\*\)'
git grep -E "$EXPR" -- $FILES ':!BUILDING.md' |
	filter_nasm_comments
unset EXPR
echo

echo '---------- (type) var ----------'
echo
EXPR='(^| |\(|\*)\([^\)\(\> \*]*\) [A-Za-z0-9_\(\"\&][^ \&]'
EXCLEXPR='(?<!\(sym\) wr)'
git grep -P "$EXPR""$EXCLEXPR" -- $FILES $NCJGFILES ':!*.md' ':!README.ijg' ':!change.log' ':!cmakescripts/' ':!/*.txt' ':!*.1' ':!java/README' ':!tj*test*.in' |
	filter_nasm_comments
# Process C, Java, and GAS files separately, so we can filter out the comments
EXCLEXPR='(?<!if)'
grep_without_c_comments "$EXCLEXPR""$EXPR" $CJGFILES |
	filter_quotes
unset EXPR
unset EXCLEXPR
echo

echo '---------- (type *) var ----------'
echo
git grep -P '(?<!\ sizeof\(void\ )\*\) [A-Za-z0-9_\(]' -- $FILES ':!*.md' |
	grep -vE ':EXTERN\([A-Za-z0-9_ ]+ \*\) '
echo

echo '---------- (*cinfo->something->method)(args) ----------'
echo
git grep -E '\(\*[^ ]*\)\(' -- $FILES
echo

echo # ************************************************************************


echo '********** DETECTING INCORRECT MACRO SPACING **********'
echo
EXCLEXPR='(?!#define LEAF_MIPS32R2)(?!#define END)'
git ls-files -- $FILES | while read file; do
	pcregrep -H -M "$EXCLEXPR"'#define.*\\\n   [ ]*[^ ]*' $file
done
# #define  something
git grep -E '^[#%]define {2,}' -- $FILES
# #define something(...) something
git grep -E '^[#%]define [A-Za-z0-9_]+\([^\(\)]*\) [^ \\{]' -- $FILES
# #define something something
git grep -E '^[#%]define [^\(\) ]+ [^ \\{/]' -- $FILES ':!java/org_libjpegturbo_turbojpeg_TJ.h'
# #if defined condition
grep_without_c_comments 'defined ' $CGFILES | filter_quotes
unset EXCLEXPR
echo

echo # ************************************************************************


echo '********** DETECTING INCORRECT COMMA SPACING **********'

echo '---------- [ ], ----------'
echo
EXPR=' ,'
EXCLEXPR='(?<!,)'
git grep -P "$EXCLEXPR""$EXPR" -- $FILES
echo

echo '---------- ,something ----------'
echo
EXPR=',[^ \)]'
EXCLEXPR='(?<!\")'
git grep -P "$EXCLEXPR""$EXPR" -- $FILES $NCGFILES ':!.github/workflows' ':!*CMakeLists.txt' ':!*.1' ':!libjpeg.txt' ':!usage.txt' ':!wizard.txt' ':!release/rpm.spec.in' ':!win/*.rc.in' |
	filter_nasm_comments |
	grep -vE 'simd/.*\.asm:    .*[A-Z]+\([^\(\)]*'"$EXPR"'[^\(\)]*\)'
# Process C and GAS files separately, so we can filter out the comments
EXCLEXPR='(?<!'\'')'
grep_without_c_comments "$EXCLEXPR""$EXPR" $CGFILES |
	filter_quotes |
	grep -vE '^jquant1\.c:  { .*'"$EXPR"'.* }[,]*$'
unset EXPR
unset EXCLEXPR
echo

echo # ************************************************************************


echo '********** DETECTING INCORRECT OPERATOR SPACING **********'

echo '---------- Incorrect pointer operator spacing ----------'
echo
EXPR='[^ /]\* '
git grep -E "$EXPR" -- $FILES $NCGFILES ':!*.md' ':!*.txt' ':!README.ijg' ':!*.cmake' ':!release/makemacpkg.in' ':!tj*test*.in' ':!croptest.in' |
	filter_nasm_comments
# Process C and GAS files separately, so we can parse out the comments
grep_without_c_comments "$EXPR" $CGFILES
unset EXPR
echo

echo '---------- Incorrect address operator spacing ----------'
echo
git grep -E '[^ \&]\& ' -- $FILES
echo

# OPERATORS:
# Assignment: =, +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=
# Arithmetic: +, -, *, /, %
# Unary: +something, -something
# Increment/decrement: ++something, something++, --something, something--
# Comparison: ==, !=, >, <, >=, <=
# Logical: !, &&, ||
# Bitwise: ~, &, |, ^, <<, >>

echo '---------- No space before other operators ----------'
echo
OP='([=\+\-\*/%&\|\^\!\<\>]*=|[\+\-\*/]|\>+|\<+|&+|\|+|\^)'
EXPR='[^ ]\b[\)\]]*'"$OP"
EXCLEXPR='(?!1\-2\.nolist 0xFFFF)(?!U\-stack noalloc)'
git grep -P "$EXCLEXPR""$EXPR" -- '*.asm' '*.inc' '*.inc.h' |
	filter_nasm_comments |
	pcregrep -v 'simd/.*(\.asm|\.inc):    .*'"$EXPR" |
	grep -vE 'simd/.*(\.asm|\.inc\.h|\.inc):%(define|include|macro)'

OP='([=\+\-\*/%&\|\^\!\<\>]*=|[\+\-\*/%]|\>+|\<+|&+|\|+|\^)'
EXPR='[^ ]\b[\)\]]*'"$OP"
EXCLEXPR='(?!_\*;)'
git grep -P "$EXCLEXPR""$EXPR" -- $FILES $NCJGFILES ':!*.asm' ':!*.inc' ':!*.inc.h' ':!*.md' ':!README.ijg' ':!*.yml' ':!change.log' ':!*.1' ':!cmakescripts/' ':!/*.txt' ':!doxygen.config' ':!java/MANIFEST.MF' ':!java/README' ':!release/*.in' ':!tj*test*.in' ':!croptest.in' ':!fuzz/build.sh' ':!win/*.rc.in'

# Process C, Java, and GAS files separately, so we can filter out the comments
OP='(?!\-\>)(?!\+\+)(?!\-\-)([=\+\-\*/%&\|\^\!\<\>]*=|[\+/%]|\*(?!\))|\-(?![0-9])|\>+|\<+|&&|&|\|+|\^)'
EXPR='[^ ]\b[\)\]]*'"$OP"
EXCLEXPR='(?!8\-bit JSAMPLEs)(?!U\-stack,)(?<!\(j_common_pt)(?<!\(JSAMPRO)'
grep_without_c_comments "$EXCLEXPR""$EXPR" $CJGFILES |
	filter_quotes |
	pcregrep -v ':#include \<.*\>'

# Process ternary conditional operators separately, so we can filter out
# cases and labels.
EXPR='[^ ]\b[\)\]]*[?:]'
EXCLEXPR='(?<!\:lo1)'
grep_without_c_comments "$EXCLEXPR""$EXPR" $CJGFILES |
	filter_quotes |
	grep -vE '(\.c|\.java|\.S|\.h):[ ]*[A-Za-z0-9_\\\(\)]+:' |
	grep -vE '(\.c|\.cc|\.java|\.h): *(case|default|bailout).*:'

unset EXPR
unset EXCLEXPR
echo

echo '---------- No space after other operators ----------'
echo
OP='([=\+\-\*/%&\|\^\!\<\>]*=|[\+\-\*/]|\>+|\<+|&+|\|+|\^)'
EXPR="$OP"'[\(]*\b[^ ]'
EXCLEXPR='(?!-F_[0-9]_[0-9]{3})(?!-[0-9\.]+$)(?!-2\.nolist 0xFFFF)(?!-stack noalloc)'
git grep -P "$EXCLEXPR""$EXPR" -- '*.asm' '*.inc' '*.inc.h' |
	filter_nasm_comments |
	pcregrep -v 'simd/.*(\.asm|\.inc):    .*'"$EXPR" |
	grep -vE 'simd/.*(\.asm|\.inc\.h|\.inc):[%#](define|include)'

OP='([=\+\-\*/%&\|\^\!\<\>]*=|[\+\-\*/%]|\>+|\<+|&+|\|+|\^)'
EXPR="$OP"'[\(]*\b[^ ]'
git grep -P "$EXPR" -- $FILES $NCJGFILES ':!*.asm' ':!*.inc' ':!*.inc.h' ':!*.md' ':!README.ijg' ':!*.yml' ':!change.log' ':!*.1' ':!cmakescripts/' ':!/*.txt' ':!doxygen.config' ':!java/MANIFEST.MF' ':!java/README' ':!release/*.in' ':!tj*test*.in' ':!croptest.in' ':!fuzz/build.sh' ':!win/*.rc.in'

# NOTE: We can't check for *something or &something effectively, because
# there's no way to distinguish those errors from valid pointer/address
# operators.  We also can't check for -something effectively, because there's
# no way to distinguish those errors from valid unary operators.  We have to
# hope that, if such errors exist, they will be caught by the something{op}
# check.  We also have to hope that someone will eventually write a decent
# open source C style checker!
OP='([=\+\-\*/%&\|\^\!\<\>]*=|[\+/%]|\>+|\<+|&&|\|+|\^)(?<!\-\>)(?<!\+\+)(?<!\-\-)'
EXPR="$OP"'[\(]*\b[^ ]'
EXCLEXPR='(?!\-stack,)(?!%progbits)(?!%function)'
grep_without_c_comments "$EXCLEXPR""$EXPR" $CJGFILES |
	filter_quotes |
	pcregrep -v ':#include \<.*\>'

# Process ternary conditional operators separately
EXPR='[?:][\(]*\b[^ ]'
grep_without_c_comments "$EXCLEXPR""$EXPR" $CJGFILES |
	filter_quotes |
	pcregrep -v 'simd/.*\.S:    .*'"$EXPR"

unset EXPR
unset EXCLEXPR
echo

echo '---------- [!|~] something ----------'
echo
git grep -P '(?<!3DNow)[!~] \b' -- $FILES
echo

echo '---------- - FIX* ----------'
echo
git grep -P '(\(|, )\- FIX' -- $FILES
echo

echo # ************************************************************************


echo '********** DETECTING INCORRECT OPERATOR CONTINUANCE **********'
echo
OP='([=\+\-\*/%&\|\^\!\<\>]*=|[\+\-\*/%]|\>+|\<+|&+|\|+|\^|\?|\:)'
EXPR='^ *'"$OP"' +'
git grep -P "$EXPR" -- $FILES $NCJGFILES ':!*.md' ':!*.yml' ':!change.log' ':!*.1' ':!/*.txt'
EXPR='^ *'"$OP"' +'
grep_without_c_comments "$EXPR" $CJGFILES |
	grep -vE 'simd/mips64/.*-mmi\.c: +:' |
	grep -vE 'simd/mips64/loongson-mmintrin\.h: +:'
unset EXPR
echo

echo # ************************************************************************


echo '********** DETECTING INCORRECT FUNCTION SPACING **********'
echo
EXPR='\b \([^\*]'
EXCLEXPR='(?<!byte \(.)(?<!equ \(.)(?<!dd \(.)'
git grep -P "$EXPR""$EXCLEXPR" -- $FILES $NCJGFILES ':!*.md' ':!README.ijg' ':!appveyor.yml' ':!change.log' ':!*.1' ':!cmakescripts/' ':!/*.txt' ':!java/README' ':!release/*.in' ':!croptest.in' |
	filter_nasm_comments
# Process C and GAS files separately, so we can parse out the comments
EXCLEXPR='(?<!if \(.)(?<!return \(.)(?<!for \(.)(?<!while \(.)(?<!switch \(.)(?<!else \(.)(?<!\.short \(.)(?<!catch \(.)(?<!do \(.)'
grep_without_c_comments "$EXPR""$EXCLEXPR" $CJGFILES |
	filter_quotes
echo

echo # ************************************************************************


if [ "$1" = "-selftest" ]; then
	popd >/dev/null 2>&1
fi
